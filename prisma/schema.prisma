generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id
  name                String
  email               String
  emailVerified       Boolean
  image               String?
  createdAt           DateTime
  updatedAt           DateTime
  role                String?
  banned              Boolean?
  banReason           String?
  banExpires          DateTime?
  lastMagicLinkSentAt DateTime?
  sessions            Session[]
  accounts            Account[]

  gangId               Int?
  gang                 Gang?  @relation(fields: [gangId], references: [id])
  membershipGangStatus String @default("PENDING")

  validatedGangs Gang[] @relation("ValidatedBy")

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Gang {
  id        Int    @id @default(autoincrement())
  name      String
  latitude  Float
  longitude Float
  members   User[]
  status    String @default("PENDING")

  validatedByUserId String?
  validatedBy       User?   @relation("ValidatedBy", fields: [validatedByUserId], references: [id])

  // Relaciones con actividades
  organisedActivities Activity[] @relation("ActivityOrganisers")
  hostedActivities    Activity[] @relation("ActivityPlace")

  @@map("gang")
}

model Activity {
  id   Int      @id @default(autoincrement())
  name String
  desc String?
  date DateTime

  // Peñas organizadoras (relación many-to-many)
  organisingGangs Gang[] @relation("ActivityOrganisers")

  // Lugar: puede ser una peña o coordenadas
  placeGangId Int?
  placeGang   Gang? @relation("ActivityPlace", fields: [placeGangId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("activity")
}
