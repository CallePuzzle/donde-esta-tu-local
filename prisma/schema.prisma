generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]
  subscription  String?

  gangId               Int?
  gang                 Gang?  @relation(fields: [gangId], references: [id])
  membershipGangStatus String @default("PENDING")

  validatedGangs Gang[]        @relation("ValidatedBy")
  modifiedGangs  GangHistory[] @relation("ModifiedBy")

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Gang {
  id        Int    @id @default(autoincrement())
  name      String
  latitude  Float
  longitude Float
  members   User[]
  status    String @default("PENDING")

  validatedByUserId String?
  validatedBy       User?   @relation("ValidatedBy", fields: [validatedByUserId], references: [id])

  // Relaciones con actividades
  collaboratorActivities Activity[] @relation("ActivityCollaborator")
  hostedActivities       Activity[] @relation("ActivityPlace")

  // Hist칩rico de cambios
  history GangHistory[]

  @@map("gang")
}

model Activity {
  id   Int    @id @default(autoincrement())
  name String

  date     DateTime @unique
  dateDesc String?

  // Pe침as colaboradoras (relaci칩n many-to-many)
  collaboratingGangs Gang[] @relation("ActivityCollaborator")

  placeGangId Int?
  placeGang   Gang?   @relation("ActivityPlace", fields: [placeGangId], references: [id])
  placeDesc   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("activity")
}

model GangHistory {
  id     Int  @id @default(autoincrement())
  gangId Int
  gang   Gang @relation(fields: [gangId], references: [id], onDelete: Cascade)

  // Campos hist칩ricos
  name      String
  latitude  Float
  longitude Float

  // Metadatos del cambio
  changedByUserId String
  changedBy       User     @relation("ModifiedBy", fields: [changedByUserId], references: [id])
  changeType      String // CREATE, UPDATE
  createdAt       DateTime @default(now())

  @@index([gangId])
  @@index([createdAt])
  @@map("gang_history")
}

model EmailSent {
  id    Int      @id @default(autoincrement())
  email String
  date  DateTime @default(now())

  @@map("email_sent")
}
